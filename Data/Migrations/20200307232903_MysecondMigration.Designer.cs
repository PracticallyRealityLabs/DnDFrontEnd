// <auto-generated />
using System;
using DnDFrontEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DnDFrontEnd.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200307232903_MysecondMigration")]
    partial class MysecondMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DnDFrontEnd.Models.Acrobatics", b =>
                {
                    b.Property<int>("Acrobaticsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acrobaticsprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Acrobaticsid");

                    b.ToTable("Acrobatics");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.AnimalHandling", b =>
                {
                    b.Property<int>("AnimalHandlingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Animalhandprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnimalHandlingId");

                    b.ToTable("AnimalHandling");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Arcana", b =>
                {
                    b.Property<int>("Arcanaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arcanaprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Arcanaid");

                    b.ToTable("Arcana");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Athletics", b =>
                {
                    b.Property<int>("Athleticsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Athleticsproficiency")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Athleticsid");

                    b.ToTable("Athletics");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Background", b =>
                {
                    b.Property<int>("Backgroundid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Backgroundtype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bonds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Characterid")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flaws")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ideals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Traits")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Backgroundid");

                    b.HasIndex("Characterid");

                    b.ToTable("Background");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampaignName")
                        .HasColumnType("int");

                    b.HasKey("CampaignId");

                    b.ToTable("Campaign");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Charisma", b =>
                {
                    b.Property<int>("Charismaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Chasaveprof")
                        .HasColumnType("bit");

                    b.Property<int?>("Chavalue")
                        .HasColumnType("int");

                    b.Property<int?>("Deceptionid")
                        .HasColumnType("int");

                    b.Property<int?>("Intimidationid")
                        .HasColumnType("int");

                    b.Property<int?>("Performanceid")
                        .HasColumnType("int");

                    b.Property<int?>("Persuasionid")
                        .HasColumnType("int");

                    b.HasKey("Charismaid");

                    b.HasIndex("Deceptionid");

                    b.HasIndex("Intimidationid");

                    b.HasIndex("Performanceid");

                    b.HasIndex("Persuasionid");

                    b.ToTable("Charisma");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Constitution", b =>
                {
                    b.Property<int>("Constitutionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Consaveprof")
                        .HasColumnType("bit");

                    b.Property<int?>("Convalue")
                        .HasColumnType("int");

                    b.HasKey("Constitutionid");

                    b.ToTable("Constitution");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Deception", b =>
                {
                    b.Property<int>("Deceptionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Deceptionprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Deceptionid");

                    b.ToTable("Deception");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Dexterity", b =>
                {
                    b.Property<int>("Dexterityid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Acrobaticsid")
                        .HasColumnType("int");

                    b.Property<bool?>("Dexsaveprof")
                        .HasColumnType("bit");

                    b.Property<int?>("Dexvalue")
                        .HasColumnType("int");

                    b.Property<int?>("Sleightid")
                        .HasColumnType("int");

                    b.Property<int?>("Stealthid")
                        .HasColumnType("int");

                    b.HasKey("Dexterityid");

                    b.HasIndex("Acrobaticsid");

                    b.HasIndex("Sleightid");

                    b.HasIndex("Stealthid");

                    b.ToTable("Dexterity");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Features", b =>
                {
                    b.Property<int>("Featuresid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Aquiredfrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CaharacterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Featuresid");

                    b.HasIndex("CaharacterId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.History", b =>
                {
                    b.Property<int>("Historyid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Historyprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Historyid");

                    b.ToTable("History");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Insight", b =>
                {
                    b.Property<int>("Insightid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Insighprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Insightid");

                    b.ToTable("Insight");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Intelligence", b =>
                {
                    b.Property<int>("Intelligenceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Arcanaid")
                        .HasColumnType("int");

                    b.Property<int?>("Historyid")
                        .HasColumnType("int");

                    b.Property<bool?>("Intsaveprof")
                        .HasColumnType("bit");

                    b.Property<int?>("Intvalue")
                        .HasColumnType("int");

                    b.Property<int?>("Investigationid")
                        .HasColumnType("int");

                    b.Property<int?>("Natureid")
                        .HasColumnType("int");

                    b.Property<int?>("Religionid")
                        .HasColumnType("int");

                    b.HasKey("Intelligenceid");

                    b.HasIndex("Arcanaid");

                    b.HasIndex("Historyid");

                    b.HasIndex("Investigationid");

                    b.HasIndex("Natureid");

                    b.HasIndex("Religionid");

                    b.ToTable("Intelligence");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Intimidation", b =>
                {
                    b.Property<int>("Intimidationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Intimidationprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Intimidationid");

                    b.ToTable("Intimidation");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Inventory", b =>
                {
                    b.Property<int>("Inventoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Characterid")
                        .HasColumnType("int");

                    b.Property<string>("Encumberance")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Inventoryid");

                    b.HasIndex("Characterid");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.InventoryHasItems", b =>
                {
                    b.Property<int?>("InventoryHasItemsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("Inventoryid")
                        .HasColumnType("int");

                    b.Property<bool?>("Isattuned")
                        .HasColumnType("bit");

                    b.Property<int?>("Itemid")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("InventoryHasItemsid");

                    b.HasIndex("Inventoryid");

                    b.HasIndex("Itemid");

                    b.ToTable("InventoryHasItems");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Investigation", b =>
                {
                    b.Property<int>("Investigationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Investigationprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Investigationid");

                    b.ToTable("Investigation");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Items", b =>
                {
                    b.Property<int>("Itemsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Attunementreq")
                        .HasColumnType("bit");

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Itemsid");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Nature", b =>
                {
                    b.Property<int>("Natureid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Natureprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Natureid");

                    b.ToTable("Nature");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Perception", b =>
                {
                    b.Property<int>("Perceptionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Perceptionprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Perceptionid");

                    b.ToTable("Perception");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Performance", b =>
                {
                    b.Property<int>("Performanceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Performanceprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Performanceid");

                    b.ToTable("Performance");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Persuasion", b =>
                {
                    b.Property<int>("Persuasionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Persausionprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Persuasionid");

                    b.ToTable("Persuasion");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.PlayerCharacter", b =>
                {
                    b.Property<int>("PlayerCharacterid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alignment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Campaignid")
                        .HasColumnType("int");

                    b.Property<string>("Charactername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Userid")
                        .HasColumnType("int");

                    b.HasKey("PlayerCharacterid");

                    b.HasIndex("Campaignid");

                    b.HasIndex("Userid");

                    b.ToTable("PlayerCharacter");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Religion", b =>
                {
                    b.Property<int>("Religionid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Religionprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Religionid");

                    b.ToTable("Religion");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.SleightOfHand", b =>
                {
                    b.Property<int>("Sleightofhandid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Sleightprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sleightofhandid");

                    b.ToTable("SleightOfHand");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.SpellList", b =>
                {
                    b.Property<int>("Spelllistid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Characterid")
                        .HasColumnType("int");

                    b.HasKey("Spelllistid");

                    b.HasIndex("Characterid");

                    b.ToTable("SpellList");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.SpellListHasSpells", b =>
                {
                    b.Property<int?>("SpellListHasSpellsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SpellListId")
                        .HasColumnType("int");

                    b.Property<int?>("Spellid")
                        .HasColumnType("int");

                    b.HasKey("SpellListHasSpellsid");

                    b.HasIndex("SpellListId");

                    b.HasIndex("Spellid");

                    b.ToTable("SpellListHasSpells");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Spells", b =>
                {
                    b.Property<int>("Spellsid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Components")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Concentration")
                        .HasColumnType("bit");

                    b.Property<int?>("Description")
                        .HasColumnType("int");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("Range")
                        .HasColumnType("int");

                    b.Property<string>("School")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Spellname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Spellsid");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.StatBlock", b =>
                {
                    b.Property<int>("Statblockid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Basehp")
                        .HasColumnType("int");

                    b.Property<int?>("Characterid")
                        .HasColumnType("int");

                    b.Property<int?>("Charismaid")
                        .HasColumnType("int");

                    b.Property<int?>("Constitutionid")
                        .HasColumnType("int");

                    b.Property<int?>("Dexterityid")
                        .HasColumnType("int");

                    b.Property<int?>("Intelligenceid")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("Passiveperception")
                        .HasColumnType("int");

                    b.Property<int?>("Speed")
                        .HasColumnType("int");

                    b.Property<int?>("Strengthid")
                        .HasColumnType("int");

                    b.Property<string>("Vision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Wisdomid")
                        .HasColumnType("int");

                    b.HasKey("Statblockid");

                    b.HasIndex("Characterid");

                    b.HasIndex("Charismaid");

                    b.HasIndex("Constitutionid");

                    b.HasIndex("Dexterityid");

                    b.HasIndex("Intelligenceid");

                    b.HasIndex("Strengthid");

                    b.HasIndex("Wisdomid");

                    b.ToTable("StatBlock");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Stealth", b =>
                {
                    b.Property<int>("Stealthid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Stealthprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Stealthid");

                    b.ToTable("Stealth");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Strength", b =>
                {
                    b.Property<int>("Strengthid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Athleticsid")
                        .HasColumnType("int");

                    b.Property<bool?>("Strsaveprof")
                        .HasColumnType("bit");

                    b.Property<int?>("Strvalue")
                        .HasColumnType("int");

                    b.HasKey("Strengthid");

                    b.HasIndex("Athleticsid");

                    b.ToTable("Strength");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Survival", b =>
                {
                    b.Property<int>("Survivalid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Survivalprof")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Survivalid");

                    b.ToTable("Survival");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Users", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UsersId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.UsersBelongToCampaign", b =>
                {
                    b.Property<int?>("UsersBelongToCampaignid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CampaignId")
                        .HasColumnType("int");

                    b.Property<bool?>("Role")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UsersBelongToCampaignid");

                    b.HasIndex("CampaignId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersBelongToCampaign");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Wisdom", b =>
                {
                    b.Property<int>("Wisdomid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Animalhandid")
                        .HasColumnType("int");

                    b.Property<int?>("Insightid")
                        .HasColumnType("int");

                    b.Property<int?>("Perceptionid")
                        .HasColumnType("int");

                    b.Property<int?>("Survivalid")
                        .HasColumnType("int");

                    b.Property<bool?>("Wissaveprof")
                        .HasColumnType("bit");

                    b.Property<int?>("Wisvalue")
                        .HasColumnType("int");

                    b.HasKey("Wisdomid");

                    b.HasIndex("Animalhandid");

                    b.HasIndex("Insightid");

                    b.HasIndex("Perceptionid");

                    b.HasIndex("Survivalid");

                    b.ToTable("Wisdom");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Background", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.PlayerCharacter", "Character")
                        .WithMany("Background")
                        .HasForeignKey("Characterid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Charisma", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.Deception", "Deception")
                        .WithMany("Charisma")
                        .HasForeignKey("Deceptionid");

                    b.HasOne("DnDFrontEnd.Models.Intimidation", "Intimidation")
                        .WithMany("Charisma")
                        .HasForeignKey("Intimidationid");

                    b.HasOne("DnDFrontEnd.Models.Performance", "Performance")
                        .WithMany("Charisma")
                        .HasForeignKey("Performanceid");

                    b.HasOne("DnDFrontEnd.Models.Persuasion", "Persuasion")
                        .WithMany("Charisma")
                        .HasForeignKey("Persuasionid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Dexterity", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.Acrobatics", "Acrobatics")
                        .WithMany("Dexterity")
                        .HasForeignKey("Acrobaticsid");

                    b.HasOne("DnDFrontEnd.Models.SleightOfHand", "Sleight")
                        .WithMany("Dexterity")
                        .HasForeignKey("Sleightid");

                    b.HasOne("DnDFrontEnd.Models.Stealth", "Stealth")
                        .WithMany("Dexterity")
                        .HasForeignKey("Stealthid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Features", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.PlayerCharacter", "Caharacter")
                        .WithMany("Features")
                        .HasForeignKey("CaharacterId");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Intelligence", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.Arcana", "Arcana")
                        .WithMany("Intelligence")
                        .HasForeignKey("Arcanaid");

                    b.HasOne("DnDFrontEnd.Models.History", "History")
                        .WithMany("Intelligence")
                        .HasForeignKey("Historyid");

                    b.HasOne("DnDFrontEnd.Models.Investigation", "Investigation")
                        .WithMany("Intelligence")
                        .HasForeignKey("Investigationid");

                    b.HasOne("DnDFrontEnd.Models.Nature", "Nature")
                        .WithMany("Intelligence")
                        .HasForeignKey("Natureid");

                    b.HasOne("DnDFrontEnd.Models.Religion", "Religion")
                        .WithMany("Intelligence")
                        .HasForeignKey("Religionid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Inventory", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.PlayerCharacter", "Character")
                        .WithMany("Inventory")
                        .HasForeignKey("Characterid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.InventoryHasItems", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.Inventory", "Inventory")
                        .WithMany("InventoryHasItems")
                        .HasForeignKey("Inventoryid");

                    b.HasOne("DnDFrontEnd.Models.Items", "Item")
                        .WithMany("InventoryHasItems")
                        .HasForeignKey("Itemid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.PlayerCharacter", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.Campaign", "Campaign")
                        .WithMany("PlayerCharacter")
                        .HasForeignKey("Campaignid");

                    b.HasOne("DnDFrontEnd.Models.Users", "User")
                        .WithMany("PlayerCharacter")
                        .HasForeignKey("Userid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.SpellList", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.PlayerCharacter", "Character")
                        .WithMany("SpellList")
                        .HasForeignKey("Characterid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.SpellListHasSpells", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.SpellList", "SpellList")
                        .WithMany("SpellListHasSpells")
                        .HasForeignKey("SpellListId");

                    b.HasOne("DnDFrontEnd.Models.Spells", "Spell")
                        .WithMany("SpellListHasSpells")
                        .HasForeignKey("Spellid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.StatBlock", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.PlayerCharacter", "Character")
                        .WithMany("StatBlock")
                        .HasForeignKey("Characterid");

                    b.HasOne("DnDFrontEnd.Models.Charisma", "Charisma")
                        .WithMany("StatBlock")
                        .HasForeignKey("Charismaid");

                    b.HasOne("DnDFrontEnd.Models.Constitution", "Constitution")
                        .WithMany("StatBlock")
                        .HasForeignKey("Constitutionid");

                    b.HasOne("DnDFrontEnd.Models.Dexterity", "Dexterity")
                        .WithMany("StatBlock")
                        .HasForeignKey("Dexterityid");

                    b.HasOne("DnDFrontEnd.Models.Intelligence", "Intelligence")
                        .WithMany("StatBlock")
                        .HasForeignKey("Intelligenceid");

                    b.HasOne("DnDFrontEnd.Models.Strength", "Strength")
                        .WithMany("StatBlock")
                        .HasForeignKey("Strengthid");

                    b.HasOne("DnDFrontEnd.Models.Wisdom", "Wisdom")
                        .WithMany("StatBlock")
                        .HasForeignKey("Wisdomid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Strength", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.Athletics", "Athletics")
                        .WithMany("Strength")
                        .HasForeignKey("Athleticsid");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.UsersBelongToCampaign", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.Campaign", "Campaign")
                        .WithMany("UsersBelongToCampaign")
                        .HasForeignKey("CampaignId");

                    b.HasOne("DnDFrontEnd.Models.Users", "User")
                        .WithMany("UsersBelongToCampaign")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DnDFrontEnd.Models.Wisdom", b =>
                {
                    b.HasOne("DnDFrontEnd.Models.AnimalHandling", "Animalhand")
                        .WithMany("Wisdom")
                        .HasForeignKey("Animalhandid");

                    b.HasOne("DnDFrontEnd.Models.Insight", "Insight")
                        .WithMany("Wisdom")
                        .HasForeignKey("Insightid");

                    b.HasOne("DnDFrontEnd.Models.Perception", "Perception")
                        .WithMany("Wisdom")
                        .HasForeignKey("Perceptionid");

                    b.HasOne("DnDFrontEnd.Models.Survival", "Survival")
                        .WithMany("Wisdom")
                        .HasForeignKey("Survivalid");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
